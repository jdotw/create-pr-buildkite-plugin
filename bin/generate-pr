#!/bin/bash
set -euo pipefail

echo "--- :package: Installing dependencies"
apt-get update && apt-get install -y curl jq git

echo "--- :github: Installing GitHub CLI"
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
apt-get update && apt-get install -y gh

echo "--- :robot_face: Installing Claude Code CLI"
echo "Node version: $(node --version)"
echo "NPM version: $(npm --version)"
echo "Attempting global install..."
npm install -g @anthropic-ai/claude-code || echo "Global install failed, will use npx"
echo "Verifying claude-code installation..."
which claude-code || echo "claude-code not in PATH, will use npx"
claude-code --version || echo "claude-code not accessible, will use npx"

echo "--- :git: Configuring Git"
git config --global user.name "Buildkite Agent"
git config --global user.email "buildkite@${LINEAR_TEAM_NAME}.com"

echo "--- :robot_face: Generating PR with Claude Code CLI"

# Extract issue data from environment
ISSUE_ID="${LINEAR_ISSUE_IDENTIFIER}"
ISSUE_TITLE="${LINEAR_ISSUE_TITLE}"
ISSUE_DESCRIPTION="${LINEAR_ISSUE_DESCRIPTION}"
ISSUE_URL="${LINEAR_ISSUE_URL}"
ISSUE_JSON="${ISSUE_DATA_JSON}"

# Parse issue history and comments from JSON for context
echo "--- :page_facing_up: Parsing issue data"
ISSUE_HISTORY=$(echo "$ISSUE_JSON" | jq -r '.history[] |
  if .type == "comment" then
    "Comment by \(.user.displayName // .user.name // "Unknown"): \(.content.body)"
  elif .type == "history" and .content.to_state then
    "State changed from \(.content.from_state.name // "none") to \(.content.to_state.name)"
  elif .type == "history" and .content.from_assignee != .content.to_assignee then
    "Assignee changed from \(.content.from_assignee.displayName // "none") to \(.content.to_assignee.displayName // "none")"
  else empty end' | head -20)

# Create a detailed issue context file for Claude Code
echo "--- :memo: Creating issue context file"
CONTEXT_FILE=$(mktemp)
cat > "$CONTEXT_FILE" << EOF
# Linear Issue: ${ISSUE_ID}

## Title
${ISSUE_TITLE}

## Description
${ISSUE_DESCRIPTION}

## Issue Details
- **URL**: ${ISSUE_URL}
- **Team**: ${LINEAR_TEAM_NAME}
- **Assignee**: ${LINEAR_ASSIGNEE}
- **Priority**: ${LINEAR_ISSUE_PRIORITY}
- **State**: ${LINEAR_ISSUE_STATE}
- **Creator**: ${LINEAR_CREATOR}

## Recent Activity & History
${ISSUE_HISTORY}

## Full Issue Data (JSON)
\`\`\`json
${ISSUE_JSON}
\`\`\`

## Implementation Request
Please implement the functionality described in this Linear issue. Follow Rails best practices and the existing patterns in this codebase.
EOF

# Configure git to use GITHUB_TOKEN for authentication
echo "--- :key: Configuring git authentication"
git config --global --add safe.directory /app

# Extract the repository URL without protocol
REPO_URL=$BUILDKITE_REPO
if [[ $REPO_URL == https://* ]]; then
  # Already using HTTPS, just need to add authentication
  REPO_PATH=${REPO_URL#https://github.com/}
else
  # Convert SSH to HTTPS format
  echo "Converting SSH repo to HTTPS repo"
  REPO_PATH=${REPO_URL#git@github.com:}
  REPO_PATH=${REPO_PATH%.git}
fi

echo "Repo path is $REPO_PATH"

# Set the remote URL with authentication token
git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO_PATH}"

# Create a branch for the changes
BASE_BRANCH_NAME="ai-linear-${ISSUE_ID}"  # lowercase issue ID
BRANCH_NAME="$BASE_BRANCH_NAME"

# Check if branch already exists and find a unique name
echo "--- :git: Finding unique branch name"
COUNTER=1
while git rev-parse --verify "origin/$BRANCH_NAME" >/dev/null 2>&1; do
    echo "Branch $BRANCH_NAME already exists on remote, trying ${BASE_BRANCH_NAME}-${COUNTER}"
    BRANCH_NAME="${BASE_BRANCH_NAME}-${COUNTER}"
    COUNTER=$((COUNTER + 1))
done

# Also check local branches
while git rev-parse --verify "$BRANCH_NAME" >/dev/null 2>&1; do
    echo "Branch $BRANCH_NAME exists locally, trying ${BASE_BRANCH_NAME}-${COUNTER}"
    BRANCH_NAME="${BASE_BRANCH_NAME}-${COUNTER}"
    COUNTER=$((COUNTER + 1))
done

echo "--- :git: Creating branch: $BRANCH_NAME"
git checkout -b "$BRANCH_NAME"

# Use Claude Code CLI to implement the feature
echo "--- :sparkles: Using Claude Code CLI to implement the feature"
echo "Implementing Linear issue ${ISSUE_ID}: ${ISSUE_TITLE}"

# Use Claude Code CLI to generate the implementation
echo "--- :mag: Verifying Claude Code CLI is available"
if which claude-code >/dev/null 2>&1; then
    echo "✅ claude-code found in PATH"
    claude-code --version
    CLAUDE_CMD="claude-code"
else
    echo "⚠️  claude-code not in PATH, using npx"
    CLAUDE_CMD="npx @anthropic-ai/claude-code"
fi

echo "PATH: $PATH"
echo "--- :sparkles: Running Claude Code CLI"

# Create the complete prompt file including the context
PROMPT_FILE=$(mktemp)
cat > "$PROMPT_FILE" << EOF
Based on the Linear issue below, please implement the requested functionality.

This is a Rails application with Linear integration. Please:
1. Analyze the issue requirements and any comments/history
2. Implement the necessary code changes following Rails conventions
3. Create or modify the appropriate files (controllers, models, views, routes, etc.)
4. Add tests if applicable
5. Follow the existing code patterns in this codebase

The implementation should be complete and ready for use. Focus on creating working, production-ready code that addresses all requirements mentioned in the Linear issue.

$(cat "$CONTEXT_FILE")
EOF

# Check if we should skip Claude Code for testing
if [ -n "${DEBUG_SKIP_CLAUDE:-}" ]; then
    echo "--- :warning: DEBUG MODE: Skipping Claude Code invocation"
    echo "Creating mock change file for testing..."

    # Create a mock change file with timestamp
    MOCK_FILE="test/fixtures/mock_claude_change_$(date +%Y%m%d_%H%M%S).txt"
    mkdir -p "$(dirname "$MOCK_FILE")"

    cat > "$MOCK_FILE" << EOF
# Mock Claude Code Change
# Generated at: $(date)
# Linear Issue: ${ISSUE_ID}
# Title: ${ISSUE_TITLE}
# Build Number: ${BUILDKITE_BUILD_NUMBER}
# DEBUG_SKIP_CLAUDE was set, so this is a mock change for testing the pipeline.

This file was created to ensure there are changes to commit when testing
the PR creation pipeline without actually invoking Claude Code CLI.

Issue Details:
- ID: ${ISSUE_ID}
- Title: ${ISSUE_TITLE}
- URL: ${ISSUE_URL}
- Triggered by: ${USER_NAME} (${USER_EMAIL})
EOF

    echo "Mock change file created at: $MOCK_FILE"
else
    # Run Claude Code with prompt from file
    cat "$PROMPT_FILE" | $CLAUDE_CMD \
      -p \
      --model sonnet
fi

# Clean up prompt file
rm -f "$PROMPT_FILE"

# Clean up context file
rm -f "$CONTEXT_FILE"

# Check if there are changes to commit
# echo "--- :mag: Checking for changes"
# if git diff --quiet && git diff --staged --quiet; then
#     echo "No changes were generated by Claude Code. The implementation may not have required code changes."
#     echo "Checking if Claude Code made any modifications..."

#     # Stage any new or modified files
#     git add -A

#     if git diff --staged --quiet; then
#         echo "No changes to commit. Exiting pipeline."
#         exit 0
#     fi
# fi

# Stage all changes
echo "--- :package: Staging changes generated by Claude Code"
echo "Git status:"
echo "$(git status)"
git add -A

# Commit the changes
echo "--- :package: Committing changes generated by Claude Code"
git commit -m "Implement ${ISSUE_ID}: ${ISSUE_TITLE}

This commit implements the functionality requested in Linear issue ${ISSUE_ID}.

Linear Issue: ${ISSUE_URL}
Generated by Claude Code CLI via Buildkite
Triggered by: ${USER_NAME} (${USER_EMAIL})

## Implementation Details
The code was generated automatically by Claude Code based on the Linear issue
requirements, including analysis of the issue description and activity history."

# Push the branch
echo "--- :rocket: Pushing branch to origin"
git push -u origin "$BRANCH_NAME"

# Create pull request using GitHub CLI
echo "--- :github: Creating pull request"
PR_URL=$(gh pr create \
  --title "[${ISSUE_ID}] ${ISSUE_TITLE}" \
  --body "## Summary

This PR implements the functionality requested in Linear issue [${ISSUE_ID}](${ISSUE_URL}).

## Linear Issue Details
- **Title**: ${ISSUE_TITLE}
- **Team**: ${LINEAR_TEAM_NAME}
- **Assignee**: ${LINEAR_ASSIGNEE}
- **Priority**: ${LINEAR_ISSUE_PRIORITY}
- **State**: ${LINEAR_ISSUE_STATE}

## Description
${ISSUE_DESCRIPTION}

## Implementation
This PR was automatically generated by Claude Code CLI based on the Linear issue requirements and context. The implementation follows Rails best practices and integrates with the existing codebase patterns.

## Testing
Please review the generated code and test the implementation before merging.

---
🤖 Generated by [Claude Code](https://claude.ai/code) for Linear issue ${ISSUE_ID}
👤 Triggered by: ${USER_NAME} (${USER_EMAIL})
🔗 Build: [#${BUILDKITE_BUILD_NUMBER}](${BUILDKITE_BUILD_URL})" \
  --base main \
  --head "$BRANCH_NAME")

# Extract PR number from URL
PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')

# Store PR information in Buildkite metadata
echo "--- :floppy_disk: Storing PR information in Buildkite metadata"
buildkite-agent meta-data set "pull_request_url" "$PR_URL"
buildkite-agent meta-data set "pull_request_number" "$PR_NUMBER"

echo "--- :white_check_mark: Pull request created successfully!"
echo "PR URL: $PR_URL"
echo "PR Number: #$PR_NUMBER"
echo "PR created for Linear issue ${ISSUE_ID} on branch ${BRANCH_NAME}"
